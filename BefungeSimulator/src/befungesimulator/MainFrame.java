/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package befungesimulator;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;

/**
 *
 * @author suprdewd
 */
public class MainFrame extends javax.swing.JFrame {

    private final Befunge befunge;
    private JPanel[][] boardCell = new JPanel[Befunge.HEIGHT][Befunge.WIDTH];
    private Border boardCellBorder = BorderFactory.createLineBorder(Color.gray);
    private Border boardCellBorderHighlighted = BorderFactory.createLineBorder(Color.blue, 3);
    private int editY = 0;
    private int editX = 0;

    /**
     * Creates new form MainFrame
     */
    public MainFrame(Befunge befunge) {
        
        this.befunge = befunge;
        initComponents();
        this.boardGrid.setLayout(new GridLayout(Befunge.HEIGHT, Befunge.WIDTH));
        this.boardGrid.setSize(800, 800);
        
        for (int y = 0; y < Befunge.HEIGHT; y++) {
            for (int x = 0; x < Befunge.WIDTH; x++) {
                JPanel panel = new JPanel();
                panel.setLayout(new GridBagLayout());
                panel.setBorder(this.boardCellBorder);
                panel.setBackground(Color.white);
                
                JLabel label = new JLabel();
                label.setFont(new Font("SansSerif", Font.BOLD, 16));
                
                panel.add(label);
                
                final int cy = y, cx = x;
                panel.addMouseListener(new java.awt.event.MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent mouseEvent) {
                        focusBoardCell(cy, cx);
                    }
                });
                this.boardCell[y][x] = panel;
                this.boardGrid.add(this.boardCell[y][x]);
            }
        }
        
        this.focusBoardCell(0, 0);
    }
    
    private void focusBoardCell(int y, int x) {
        this.boardCell[this.editY][this.editX].setBorder(this.boardCellBorder);
        
        if (x < 0) {
            y--;
            x = Befunge.WIDTH - 1;
        }
        
        if (x >= Befunge.WIDTH) {
            y++;
            x = 0;
        }
        
        if (y < 0) {
            y = Befunge.HEIGHT - 1;
        }
        
        if (y >= Befunge.HEIGHT) {
            y = 0;
        }
        
        this.editY = y;
        this.editX = x;
        
        this.boardCell[this.editY][this.editX].setBorder(this.boardCellBorderHighlighted);
    }
    
    private void setBoardCellValue(int y, int x, Befunge.Value val) {
        this.befunge.set(y, x, val);
        ((JLabel)this.boardCell[y][x].getComponent(0)).setText(val.toString());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardGrid = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        getContentPane().setLayout(null);

        boardGrid.setToolTipText("");
        boardGrid.setLayout(new java.awt.GridLayout());
        getContentPane().add(boardGrid);
        boardGrid.setBounds(100, 50, 153, 138);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped

    }//GEN-LAST:event_formKeyTyped

    private static boolean isPrintableChar(char c) {
        Character.UnicodeBlock block = Character.UnicodeBlock.of( c );
        return (!Character.isISOControl(c)) &&
               c != KeyEvent.CHAR_UNDEFINED &&
               block != null &&
               block != Character.UnicodeBlock.SPECIALS;
    }
    
    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        switch (evt.getExtendedKeyCode()) {
            case KeyEvent.VK_ENTER:
                this.focusBoardCell(this.editY+1, 0);
                break;
            case KeyEvent.VK_LEFT:
                this.focusBoardCell(this.editY, this.editX-1);
                break;
            case KeyEvent.VK_RIGHT:
                this.focusBoardCell(this.editY, this.editX+1);
                break;
            case KeyEvent.VK_DOWN:
                this.focusBoardCell(this.editY+1, this.editX);
                break;
            case KeyEvent.VK_UP:
                this.focusBoardCell(this.editY-1, this.editX);
                break;
            case KeyEvent.VK_BACK_SPACE:
                this.focusBoardCell(this.editY, this.editX-1);
                this.setBoardCellValue(this.editY, this.editX, new Befunge.Value(' ', Befunge.Value.Type.CHAR));
                break;
            case KeyEvent.VK_DELETE:
                this.setBoardCellValue(this.editY, this.editX, new Befunge.Value(' ', Befunge.Value.Type.CHAR));
                break;
            default:
                if (isPrintableChar(evt.getKeyChar()) || Character.isSpaceChar(evt.getKeyChar())) {
                    this.setBoardCellValue(this.editY, this.editX, new Befunge.Value(evt.getKeyChar(), Befunge.Value.Type.CHAR));
                    this.focusBoardCell(this.editY, this.editX+1);
                }
        }
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });*/
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardGrid;
    // End of variables declaration//GEN-END:variables
}
